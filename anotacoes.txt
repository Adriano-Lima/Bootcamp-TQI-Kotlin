> Trabalhando em Equipes Ágeis 
	P.D.C.A
	Pilares
		transparencia, inspeção, adaptação
	Scrum
		modelo do que deve ser feito	
	ágil
		facilidade de aprender e adaptar
		ser agil não é necessariamente mais rápido
		rápido e eficiente
	
	1 Indíviduos e Interaçõs, mais que processos e ferramentas
	2 Software em funcionamento, mais que documentaçao abrangente
	3 Colaboraçao com o cliente, mais que regociaçbo de contratos
	4 Responder a mudanças, mais que seguir um plano		

	12 principios

	Mundo é: VUCA (volatio, incerto,complexo,ambiguo)

	processo
		sempre tem o mesmo resultado
		é repetitivo

	projeto
		tem inicio e fim definidos
		fim exclusivo
		esforço temporário

	modelo tradicional
		cascata
		etapas bem definidas, em passo a passo
		valor entregue no final

	modelo ágil		
		possui ciclos (sprints)
		com entregaveis ao longo dos ciclos
		iterativo e incremental
		feedback
		valor entregue continuamente

	metodos ageis	
		Framework Scrum
			empirismo (base no que é observado), lean thiking (linha de pensamento, melhoria continua, evitar desperdicio)
			pilares: TIA transparencia, inspeção, adaptação
		Extreme Programming (XP)
			ciclos de entregas rápidos, contínuos e incrementais
			metodo agil criado para desenvolcimento de software
			interação próxima com os clientes, testagem constante e ciclos de desenvolvimento curtos.
			Planeja -> faz -> testa -> melhora -> planeja ...
		Kanban
			diminuicao do desperdicio
			definir, gerenciar e melhorar serviços que entregam trabalho de conhecimento
			Toyota
			gestao de tarefas (quadro: to do, doing, done)
		OKR
			objetivos resultados chaves
			objetivos estrategicos de uma empresa
			objetivos com descricoes qualitativas
			kR's -> metas (quantitativo)
				SMART: Específicas, Mensuráveis, Atingíveis, Relevantes e Temporais

>> Docker Fundamentals

	> Introdução ao Docker
		Modelo cliente-servidor
		Servidor
			D.C (data center) ou Cloud
			
			A cloud computing é o acesso sob demanda, via internet, a recursos de computação — aplicativos, servidores (físicos e virtuais), armazenamento de dados, ferramentas de desenvolvimento, recursos de rede e muito mais — hospedados em um data center remoto gerenciado por um provedor de serviços (ex: aws, Azure)

			Virtualizacao
				utiliza software para criar uma camada de abstração sobre o hardware do computador, permitindo que os de hardware de um único computador sejam divididos em vários computadores virtuais.

			Microserviços
				pequenos serviços independentes que se comunicam usando APIS
				APIs bem definidas
				pertecem a pequenas equipes bem definidas
				Quando quebramos uma aplicação monolítica em várias pequenas partes, conseguimos escalá-las de forma separada.

			Container
				são uma tecnologia usada para reunir um aplicativo e todos os seus arquivos necessários em um ambiente de tempo de execução. 
				Uma caixa

			Docker
				Com o Docker, é possível lidar com os containers como se fossem máquinas virtuais modulares e extremamente leves.

				Comandos essenciais 

				https://medium.com/xp-inc/principais-comandos-docker-f9b02e6944cd

				https://docs.docker.com/engine/reference/commandline/docker/

				https://dev.to/soutoigor/docker-imagens-containers-e-seus-principais-comandos-23p6	

	> Primeiros Passos com o Docker
		https://hub.docker.com/
		docker pull hello-world (pull -> baixar imagem)
		docker run hello-world (run -> executar)
		docker ps (mostra container's em execucao)
		docker ps -a (executados recentemente)

		docker run "image" sleep 10 (executa por 10 segundos)
		docker stop "ID" ou "Name"

		docker run -it ubuntu
			usando o sistema operacional dentro do container
			(para sair -> exit)
		

		docker --help (comandos antigos)

		docker container --help (coamndos novo)

		docker run -dti ubuntu (-d deixa o container executando em segundo plano)
			docker exec -it "ID" /bin/bash
				para executar funções no docker que está executando em segundo plano

		
		docker rm "ID" (pode-se pegar os tres primeiros digitos do ID)
			da lista de container's que aparecem em "docker ps"


		docker rmi (para excluir imagens)		
			-> da lista de "docker images" 

		Dando um nome para o container
			docker run -dti	--name Ubuntu-A ubuntu
			

		Copiando Arquivos para o container
			docker exec Ubuntu-A mkdir /destino
			docker exec Ubuntu-A ls /
			docker cp "nomeArquivo" Ubuntu-A:/destino	

			Mandar varios arquivos
				zip Meuzip.zip *.txt
				docker cp Meuzip.zip Ubuntu-A:/destino

		Copiando arquivos do container
			docker cp Ubuntu-A:/destino/Meuzip.zip Zipcopia.zip

		Tags
			docker pull debian:9 (tag 9, baixar uma versao especifica)

		Criando um container do MYSQL
			docker pull mysql
			
			docker run -e MYSQL_ROOT_PASSWORD=Senha123 --name mysql-A -d -p 3306:3306 mysql
				no windows nao precisa do -p 3306:3306


			docker exec -it mysql-A bash

				mysql -u root -p --protocol=tcp
					digita a senha criada

					CREATE DATABASE aula;
					show databases;
					use aula;
					exit		
			exit
			
			docker inspect mysql-A
				mostra uma serie de informações inclusive o IP que esta sendo utilizado

			
		Parando e reiniciando um container
			docker stop mysql-A
			docker start mysql-A

	
	> Armazenamento de Dados com Docker
		docker inspect "nomeContainer"
		mkdir /data
		mkdir /data/mysql-A

		docker run -e MYSQL_ROOT_PASSWORD=123 --name mysql-A -d -p 3306:3306 --volume=/data/msql-A:var/lib/mysql mysql

		Tipos de mount
			docker volume ls (volumos criados no host)
			docker volume create data-teste (criando um novo volume)
				cd /var/lib/docker/volumes
				ls
				cd data-teste
				cd _data
				touch arquivo.txt


			docker run -dti --name teste-A --mount type=volume,src=data-teste,dst=/data image

			docker rm -f teste-A
			docker volume rm data-teste

		Exemplo: Apache Contêiner
			docker pull httpd
			mkdir data/apache-A
			criar um index.html em apache-A

			docker run --name apache-A -d -p 80:80 --volume=/data/apache-A:user/local/apache2/htdocs httpd

		Exemplo: PHP - Apache
			docker pull php:7.4-apache

			mkdir data/php-A

			docker run --name php-A -d -p 8080:80 --volume=/data/php-A:/var/www/html php:7.4-apache

			cd php-A
			criar o index.php


				




				










		

	> Processamento, Logs e Rede com Docker
		docker stats "container"
			mostra uso de recursos

		docker update containerJaCriado -m 128M --cpus 0.2

		Na criação de um container
			docker run --name ubuntu-A -dti -m 128M --cpus 0.2 ubuntu

		docker info
		docker log container
		docker top container (processos)

		REdes
			docker network ls

			docker network create minha-rede
			
			docker run -dti --name ubuntu-A --network minha-rede ubuntu

			







	> Definição e Criação de um Docker File
		